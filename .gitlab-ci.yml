workflow:
  rules:
    - if: $CI_PIPELINE_SOURCE == 'push' && $CI_OPEN_MERGE_REQUESTS && $CI_MERGE_REQUEST_TARGET_BRANCH_PROTECTED == 'true'
      when: never
    - when: always

default:
  tags:
    - local

stages:
  - setup
  - deploy

# Pre-Kubeconfig setup, shared by various stages
pre_kubeconfig:
  stage: .pre
  script:
    - echo "Setting up KUBECONFIG"
    - export KUBECONFIG=$DEV_KUBE_CONFIG
    - cat $DEV_KUBE_CONFIG > $CI_PROJECT_DIR/kubeconfig
  tags:
    - laptop
  artifacts:
    paths:
      - $CI_PROJECT_DIR/kubeconfig 
    expire_in: 1h  
  rules:
    - if: $CI_PIPELINE_SOURCE == "push" && $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH

# Helm setup, reusable for both stages
.setup-helm-template: &setup-helm-template
  before_script:
    - helm version
    - helm plugin list
    - /home/linuxbrew/.linuxbrew/bin/helmfile --version
  script:
    - echo "Helm, Helmfile, and plugins installed successfully!"
  tags:
    - laptop

setup_helm:
  stage: setup
  <<: *setup-helm-template

setup_secrets_operator:
  stage: setup
  before_script:
    - apt-get update && apt-get install -y curl apt-transport-https gnupg software-properties-common
  script:
    - /home/linuxbrew/.linuxbrew/bin/age --version
    - cat $SOPS_FILE > .sops.yaml
  tags:
    - laptop

create-namespaces:
  stage: deploy
  script:
    - export AWS_ACCESS_KEY_ID=$AWS_ACCESS_KEY_ID
    - export AWS_SECRET_ACCESS_KEY=$AWS_SECRET_ACCESS_KEY
    - export AWS_DEFAULT_REGION=$AWS_DEFAULT_REGION
    - export KUBECONFIG=$DEV_KUBE_CONFIG
    - kubectl config get-contexts
    - echo "Checking and creating namespaces if they do not exist..."
    - |
      for NAMESPACE in dev stage; do
        if kubectl get namespace "$NAMESPACE" > /dev/null 2>&1; then
          echo "Namespace '$NAMESPACE' already exists."
        else
          echo "Creating namespace '$NAMESPACE'..."
          kubectl create namespace "$NAMESPACE"
        fi
      done
  needs:
    - setup_secrets_operator
    - setup_helm
  tags:
    - laptop

.deploy-template: &deploy-template
  stage: deploy
  before_script:
    - export AWS_ACCESS_KEY_ID=$AWS_ACCESS_KEY_ID
    - export AWS_SECRET_ACCESS_KEY=$AWS_SECRET_ACCESS_KEY
    - export AWS_DEFAULT_REGION=${AWS_DEFAULT_REGION:-us-west-1} # Default to us-west-1 if not set
    - export KUBECONFIG=$DEV_KUBE_CONFIG
    - export SOPS_AGE_KEY_FILE=$SOPS_AGE_KEY_FILE
    - export SOPS_AGE_KEY=$SOPS_AGE_KEY
    - export HELM_SECRETS_AGE_KEY_FILE=$SOPS_AGE_KEY_FILE
    - aws eks update-kubeconfig --region $AWS_DEFAULT_REGION --name n5-challenge-app
    - kubectl get nodes
  tags:
    - laptop

deploy-workload-helm-dev:
  <<: *deploy-template
  script:
    - /home/linuxbrew/.linuxbrew/bin/helmfile -e dev apply --log-level debug
  needs:
    - create-namespaces
  tags:
    - laptop

deploy-workload-helm-stage:
  <<: *deploy-template
  script:
    - /home/linuxbrew/.linuxbrew/bin/helmfile -e stage apply
  needs:
    - deploy-workload-helm-dev
  tags:
    - laptop
