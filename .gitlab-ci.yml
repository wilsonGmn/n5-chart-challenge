workflow:
  rules:
    - if: $CI_PIPELINE_SOURCE == 'push' && $CI_OPEN_MERGE_REQUESTS && $CI_MERGE_REQUEST_TARGET_BRANCH_PROTECTED == 'true'
      when: never
    - when: always
                #when: always: This rule is a catch-all. 
                #It means that if none of the previous rules apply, the pipeline will always run.

default:
  tags:
    - local

stages:
  - setup
  - deploy

pre_kubeconfig:
  stage: .pre
  script:
    - echo "Setting up KUBECONFIG"
    - export KUBECONFIG=$DEV_KUBE_CONFIG  # Export KUBECONFIG variable for all stages
    - cat $DEV_KUBE_CONFIG > $CI_PROJECT_DIR/kubeconfig
  tags:
    - laptop
  artifacts:
    paths:
      - $CI_PROJECT_DIR/kubeconfig 
    expire_in: 1h  # Set artifact expiration
  rules:
    - if: $CI_PIPELINE_SOURCE == "push" && $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH


setup_helm:
  stage: setup
  before_script:

    # # Update the system and install prerequisites
    # - apt-get update && apt-get install -y curl bash git openssl apt-transport-https software-properties-common

    # Install Helm
    # - curl https://baltocdn.com/helm/signing.asc | apt-key add -
    # - apt-add-repository "deb https://baltocdn.com/helm/stable/debian/ all main"
    # - apt-get update && apt-get install -y helm
    - helm version

    # Install helm plugins
    # - helm plugin install https://github.com/databus23/helm-diff
    # - helm plugin install https://github.com/jkroepke/helm-secrets
    - helm plugin list

    # Install Helmfile
    # - curl -LO https://github.com/helmfile/helmfile/releases/download/v0.169.1/helmfile_linux_amd64
    # - chmod +x helmfile_linux_amd64
    # - mv helmfile_linux_amd64 /usr/local/bin/helmfile
    # - helmfile --version
    -  /home/linuxbrew/.linuxbrew/bin/helmfile --version
  script:
    - echo "Helm, Helmfile, and plugins installed successfully!"
  tags:
    - laptop

setup_secrets_operator:
  stage: setup
  before_script:
    # Update the package manager and install prerequisites
    - apt-get update && apt-get install -y curl apt-transport-https gnupg software-properties-common
  script:
    # Install SOPS
    #     - |
    #   SOPS_LATEST_VERSION=$(curl -s "https://api.github.com/repos/getsops/sops/releases/latest" | grep -Po '"tag_name": "v[0-9.]+"' | sed -E 's/"tag_name": "v([0-9.]+)"/\1/')
    #   curl -Lo sops.deb "https://github.com/getsops/sops/releases/download/v${SOPS_LATEST_VERSION}/sops_${SOPS_LATEST_VERSION}_amd64.deb"
    #   sudo apt --fix-broken install -y ./sops.deb
    #   rm -rf sops.deb
    - sops -version

    #Install Age
    # - |
    #   curl -LO https://github.com/FiloSottile/age/releases/download/v1.2.0/age-v1.2.0-linux-amd64.tar.gz
    #   tar -xzf age-v1.1.1-linux-amd64.tar.gz
    #   mv age/age /usr/local/bin/
    #   mv age/age-keygen /usr/local/bin/
    #   rm -rf age age-v1.1.1-linux-amd64.tar.gz
    #   age --version
    #   age --version
    - /home/linuxbrew/.linuxbrew/bin/age --version

    # Configure
    - cat $SOPS_FILE > .sops.yaml
  tags:
    - laptop

create-namespaces:
  stage: deploy
  script:
    - export KUBECONFIG=$DEV_KUBE_CONFIG
    - kubectl config get-contexts
    - echo "Checking and creating namespaces if they do not exist..."
    - |
      for NAMESPACE in dev stage; do
        if kubectl get namespace "$NAMESPACE" > /dev/null 2>&1; then
          echo "Namespace '$NAMESPACE' already exists."
        else
          echo "Creating namespace '$NAMESPACE'..."
          kubectl create namespace "$NAMESPACE"
        fi
      done
  needs:
  - setup_secrets_operator
  - setup_helm
  tags:
    - laptop


.deploy-template: &deploy-template
  stage: deploy
  script:
    - export KUBECONFIG=$DEV_KUBE_CONFIG   
    - export SOPS_AGE_KEY_FILE=$SOPS_AGE_KEY_FILE
    - export SOPS_AGE_KEY=$SOPS_AGE_KEY
    - export HELM_SECRETS_AGE_KEY_FILE=$SOPS_AGE_KEY_FILE
    - /home/linuxbrew/.linuxbrew/bin/helmfile -e $HELM_ENV apply 
  tags:
    - laptop

deploy-workload-helm-dev:
  <<: *deploy-template  
  script:
    - export HELM_ENV=dev 
    - /home/linuxbrew/.linuxbrew/bin/helmfile -e dev apply
  needs:
    - create-namespaces
  tags:
    - laptop

deploy-workload-helm-stage:
  <<: *deploy-template 
  script:
    - export HELM_ENV=stage  
    - /home/linuxbrew/.linuxbrew/bin/helmfile -e stage apply
  needs:
    - deploy-workload-helm-dev 
  tags:
    - laptop
